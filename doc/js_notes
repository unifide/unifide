Unifide (main controller)
    project : Project
    canvas : Canvas
    editors : Editor[]
    theme : Theme
    user : User

Project (main model)
    units : Unit[]
    // not sure what else goes in here yet, project meta stuff anyway

// A single element in the project, e.g. a class or table
Unit

UPackage -> Unit
UClass -> Unit
UMethod -> Unit
UTable -> Unit

// One editing panel, one window can have many of these
Editor (main view)
    contexts : Context[] // can have lots of contexts available
    root : Context // this is the active context

// An editor can have a single active context at a time
Context (sub controller) {3}
    widget : ContextWidget {4}

PackageContext -> Context
ClassContext -> Context
MethodContext -> Context
DatabaseContext -> Context
TableContext -> Context

{1} Will probably need to be a more complex structure than just an array.
{2} Even though an editor can have multiple contexts, only one is active at a time.
{3} Context is a superclass and is never actually used, classes such as MethodContext, ClassContext, TableContext, etc. inherit from Context.
{4} ContextWidget isn't actually a class, but can be any widget that meets the required specs.


Editor:

All editors share a single canvas background, the editors simply know of their offset and size

The editor's initial view is a project view, which is a purely HTML view of the project, has links to relevant resources, recently used units etc.

A context can both have its own HTML elements as well as use the canvas in the background.
e.g. a PackageContext might use the canvas for relationship lines and div elements for individual classes.

Editor can have several context "branches", but one active at a time. For now, this is the class branch, with the initial context of the master PackageContext. Others branches may include the design and database branches.

Editor has a link to the main PackageContext, clicking this minimises the editor/project view into a small bar on the left or top (stays here always, all the way to the bottom levels, clicking on it expands a small version of the project viewer, with the option to return to the main ProjectContext)

The main PackageContext contains a number of sub-PackageContexts. (possibly stored in a quadtree? Irrelevant for now)
As the user zooms into these packages and a threshold size is passed, their contents start to appear.

A PackageContext can also contain ClassContexts.
A ClassContext has several display stages, each displaying more than the last as its size increases.
In order of importance:
* class name
* public properties and methods
* private properties and methods
* public method definitions
* private method definitions

Initially, it's probably enough to go from class name to all properties and methods, to full code editor.

Mouse wheel anywhere apart from a text editor zooms the view. Double clicking on anything zooms directly into it to make it fullscreen.

There's always a slim bar on the left which shows your current depth and the parent contexts, clicking on one zooms back to that context, keeping your previous context there in the list so you can go back immediately. Navigating away once you've navigated back clears the lower levels.

Future additions, might be tricky:
Classes nearer the center of the parent context get priority.
Connected classes do not disappear from view but merge into the borders to form a list of related units.

Clicking on a method header expands it to fill any free space. The next and previous method names are above and below the currently open method and clicking them switches to that method. The very top of the context contains the class name, clicking that goes to the top of the class definition and collapses all methods.

Any code, including the method headers and other jazz, is still kept editable textually.


Architecture:

Unifide contains a number of DataProcessor types. The one we're interested for the moment is CodeProcessor.
Each programming language supported by Unifide implements its own CodeProcessor and is in charge of interpreting the data received from the server by Contexts.

Example.
The current project has a CodeProcessor of type RubyProcessor.
An editor creates a PackageContext.
This context requests a top level list of packages and classes (possibly global/package variables and functions) from the server.
The server responds with a JSON message [1].
Data is sent to the main data repository (see next part).
The context checks with the main project to see which Package is the root package.
The context tells RubyProcessor which Unit it needs to process (main package).
The processor calls PackageContext methods such as createPackage(), createClass(), extends(superc,subc), implements(interface,subc) to create the data state, as well as sending information on how the data can be edited. These simpler actions may be inherited from the main CodeProcessor as they will be the same for most languages.
Whenever a new Context is made, it is either given information about where to find its data on the server, or given the data itself if it has been loaded previously (a single JSON request may send more than one layer of packages and classes).
PackageContexts continue this process recursively.
When a PackageContext creates a class, it creates a ClassContext. This context also sends data to the project's DataProcessor, but this time it needs more specialised functionality. The RubyProcessor will output class names with the correct inheritance format, and use the correct method signatures for ruby. The visual side of things will still be handled by ClassContext.

[1] JSON example for the root PackageContext for MyApp:
{"type":"Package","name":"MyPackage","depth":3,"data":[
    ["Package","MyPackage",{"hasChild":[1,2],"hasGeometry":[7]}],
    ["Interface","MyPackage.SomeInterface",{"hasKeyword":[3],"hasMethod":[4],"hasGeometry":[8]}],
    ["Class","MyPackage.MyClass",{"hasInterface":[1],"hasKeyword":[3,5],"hasMethod":[6],"hasGeometry":[9]}],
    ["Keyword","public",{}],
    ["Method","MyPackage.SomeInterface.AMethod",{}],
    ["Keyword","abstract",{}],
    ["Method","MyPackage.MyClass.AMethod",{"hasInterface":[4]}],
    ["Geometry","100x80+0+0",{}],
    ["Geometry","20x20+20+10",{}],
    ["Geometry","20x20+60+10",{}]

depth is the maximum number of levels returned - in this case, the package, its classes and interfaces, and the first level of associations inside the classes and interfaces.
integers represent the indices in the output JSON array

Package("MyPackage") hasChild Interface("MyPackage.SomeInterface")
Interface("MyPackage.SomeInterface") hasKeyword Keyword("public")
Interface("MyPackage.SomeInterface") hasMethod Method("MyPackage.SomeInterface.AMethod")
Package("MyPackage") hasChild Class("MyPackage.MyClass")
Class("MyPackage.Myclass") implements Interface("MyPackage.SomeInterface")
Class("MyPackage.MyClass") hasKeyword Keyword("public")
Class("MyPackage.MyClass") hasKeyword Keyword("abstract")
Class("MyPackage.MyClass") hasMethod Method("MyPackage.MyClass.AMethod")
Method("MyPackage.MyClass.AMethod") implements Method("MyPackage.SomeInterface.AMethod")

Data storage and access:

Once the above data has been parsed, it creates a similar structure, but with integer references replaced by actual references, as well as reverse associations. It is also indexed by "Type!Value" strings, e.g.
data["Interface!MyPackage.SomeInterface"] = {
    type:"Interface",
    name:"MyPackge.SomeInterface",
    depth:2,
    assoc:{
        "hasKeyword":{
            "Keyword!Public":{
                type:"Keyword",
                name:"Public",
                depth:1,
                assoc:{...},
                reverse:{...}
            }
        },
        "hasMethod":{
            "Method!MyPackage.SomeInterface.AMethod":{
                type:"Method",
                name:"MyPackage.SomeInterface.AMethod",
                depth:1,
                assoc:{...},
                reverse:{...}
            }
        }
    },
    reverse:{
        "hasChild":{
            "Package!MyPackage":{
                type:"Package",
                name:"MyPackage",
                depth:3,
                assoc:{...},
                reverse:{...}
            }
        },
        "implements":{
            "Class!MyPackage.MyClass":{
                type:"Class",
                name:"MyPackage.MyClass",
                depth:2,
                assoc:{...},
                reverse:{...}
            }
        }
    }
}
The depth value stores the minimum number of levels down data has been fully loaded.

The data is accessed like so:
app.data.get("Package","MyPackage")
returns: {
    type:"Package",
    name:"MyPackage",
    assoc:{"hasChild":{...}},
    reverse:{}
}
or alternatively:
app.data["Package!MyPackage"];

Inner objects are references to other Units, meaning the structure is fully traversable.
Reference loops occur so do not attempt exhaustive recursion.


Saving:

Content is autosaved every time a change is made (after a delay to prevent flooding).
Autosave content is pushed to all active clients
The delta is stored in the DB.
Once a manual save is made, the changes are merged.
One Unit can be edited at a time, other editors/sessions will see the unit as locked.
The session id, editor id and user id need to be saved alongside the delta
Once a unit is saved, its diff is merged and all locks are released
If a user navigates away or a timeout is reached, the locks are released but the diff is not merged or deleted.
A user can unlock a file it has locked elsewhere
The delta needs to contain changes to any properties and associations, as well as the unit's inner content (if applicable to the unit)
